"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[45594],{7124:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var a=i(85893),n=i(11151);const o={id:"switch-navigator",title:"createSwitchNavigator",sidebar_label:"createSwitchNavigator"},r=void 0,s={id:"switch-navigator",title:"createSwitchNavigator",description:"The purpose of SwitchNavigator is to only ever show one screen at a time. By default, it does not handle back actions and it resets routes to their default state when you switch away.",source:"@site/versioned_docs/version-2.x/switch-navigator.md",sourceDirName:".",slug:"/switch-navigator",permalink:"/docs/2.x/switch-navigator",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/switch-navigator.md",tags:[],version:"2.x",frontMatter:{id:"switch-navigator",title:"createSwitchNavigator",sidebar_label:"createSwitchNavigator"},sidebar:"version-2.x-api",previous:{title:"createStackNavigator",permalink:"/docs/2.x/stack-navigator"},next:{title:"createDrawerNavigator",permalink:"/docs/2.x/drawer-navigator"}},c={},h=[{value:"API Definition",id:"api-definition",level:2},{value:"RouteConfigs",id:"routeconfigs",level:2},{value:"SwitchNavigatorConfig",id:"switchnavigatorconfig",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The purpose of SwitchNavigator is to only ever show one screen at a time. By default, it does not handle back actions and it resets routes to their default state when you switch away.\nThis is the exact behavior that we want from the ",(0,a.jsx)(t.a,{href:"/docs/2.x/auth-flow",children:"authentication flow"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"api-definition",children:"API Definition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"createSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"routeconfigs",children:"RouteConfigs"}),"\n",(0,a.jsxs)(t.p,{children:["The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route, see ",(0,a.jsx)(t.a,{href:"/docs/2.x/stack-navigator#routeconfigs",children:"example"})," from ",(0,a.jsx)(t.code,{children:"createStackNavigator"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"switchnavigatorconfig",children:"SwitchNavigatorConfig"}),"\n",(0,a.jsx)(t.p,{children:"Several options get passed to the underlying router to modify navigation logic:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"initialRouteName"})," - The routeName for the initial tab route when first loading."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"resetOnBlur"})," - Reset the state of any nested navigators when switching away from a screen. Defaults to ",(0,a.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"paths"})," - Provide a mapping of routeName to path config, which overrides the paths set in the routeConfigs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"backBehavior"})," - Should the back button cause a tab switch to the initial route? If yes, set to ",(0,a.jsx)(t.code,{children:"initialRoute"}),", otherwise ",(0,a.jsx)(t.code,{children:"none"}),". Defaults to ",(0,a.jsx)(t.code,{children:"none"})," behavior."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(t.p,{children:["See an example of this ",(0,a.jsx)(t.a,{href:"https://snack.expo.io/@react-navigation/auth-flow",children:"on Snack"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,t,i)=>{i.d(t,{Z:()=>s,a:()=>r});var a=i(67294);const n={},o=a.createContext(n);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);