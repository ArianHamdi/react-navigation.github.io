"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[74799],{69641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=t(85893),i=t(11151);const o={id:"static-configuration",title:"Getting started with static API",sidebar_label:"Getting started"},s=void 0,c={id:"static-configuration",title:"Getting started with static API",description:"React Navigation primarily uses a dynamic component based API. This provides a lot of flexibility, however there are a few drawbacks:",source:"@site/versioned_docs/version-7.x/static-configuration.md",sourceDirName:".",slug:"/static-configuration",permalink:"/docs/7.x/static-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/static-configuration.md",tags:[],version:"7.x",frontMatter:{id:"static-configuration",title:"Getting started with static API",sidebar_label:"Getting started"},sidebar:"docs",previous:{title:"Upgrading from 6.x",permalink:"/docs/7.x/upgrading-from-6.x"},next:{title:"API Reference",permalink:"/docs/7.x/static-api-reference"}},r={},d=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Nested navigators",id:"nested-navigators",level:2},{value:"Limitations",id:"limitations",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"React Navigation primarily uses a dynamic component based API. This provides a lot of flexibility, however there are a few drawbacks:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The TypeScript types need to be configured manually, which can get verbose and overwhelming."}),"\n",(0,a.jsx)(n.li,{children:"Deep linking needs to be configured separately to match the structure of navigation tree, which can be error prone."}),"\n",(0,a.jsx)(n.li,{children:"The component API can be a bit more verbose than necessary."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To address these drawbacks, there's also a static API to configure the navigation tree that trades flexibility for convenience. This API is built into React Navigation, so you don't need to install any additional packages."}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,a.jsx)(n.p,{children:"The same principles apply to the static API as the dynamic API. We have navigators that can contain multiple screens."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  return <Navigation />;\n}\n\nexport default App;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's look at the code above in detail. You can also check the equivalent dynamic API to get a better understanding."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["To define a navigator, we use the ",(0,a.jsx)(n.code,{children:"createXNavigator"})," function (in this case ",(0,a.jsx)(n.code,{children:"createNativeStackNavigator"}),") and pass it an object with a property called ",(0,a.jsx)(n.code,{children:"screens"}),", which is an object containing configuration for screens - the name of the screen is the key and the value is the component to render:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeScreen,\n  },\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Equivalent dynamic API"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const Stack = createNativeStackNavigator();\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name="Home" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n'})})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["After defining the navigator, we use it with the ",(0,a.jsx)(n.code,{children:"createStaticNavigation"})," function to create a component to render:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const Navigation = createStaticNavigation(RootStack);\n\nfunction App() {\n  return <Navigation />;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Equivalent dynamic API"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function App() {\n  return (\n    <NavigationContainer>\n      <RootStack />\n    </NavigationContainer>\n  );\n}\n"})})]}),"\n",(0,a.jsxs)(n.p,{children:["The component returned by ",(0,a.jsx)(n.code,{children:"createStaticNavigation"})," is similar to the ",(0,a.jsx)(n.code,{children:"NavigationContainer"})," and accepts the ",(0,a.jsx)(n.a,{href:"/docs/7.x/navigation-container#props",children:"same props"}),". See ",(0,a.jsx)(n.a,{href:"/docs/7.x/static-api-reference#createstaticnavigation",children:"Static API Reference"})," for more details."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If you're using TypeScript, there's one last step to do to for automatic type-checking when using ",(0,a.jsx)(n.code,{children:"useNavigation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"type RootStackParamList = StaticParamList<typeof RootStack>;\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/docs/7.x/static-typescript",children:"Configuring TypeScript"})," for more details."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For more details on the static API, see ",(0,a.jsx)(n.a,{href:"/docs/7.x/static-api-reference",children:"Static API Reference"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"nested-navigators",children:"Nested navigators"}),"\n",(0,a.jsx)(n.p,{children:"To nest a navigator, a navigator defined using the static API can be passed as the value for a screen:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const HomeTabs = createBottomTabNavigator({\n  screens: {\n    Groups: GroupsScreen,\n    Chats: ChatsScreen,\n  },\n});\n\nconst RootStack = createNativeStackNavigator({\n  screens: {\n    Home: HomeTabs,\n  },\n});\n"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Equivalent dynamic API"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const Tab = createBottomTabNavigator();\n\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name="Groups" component={GroupsScreen} />\n      <Tab.Screen name="Chats" component={ChatsScreen} />\n    </Tab.Navigator>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nfunction RootStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name="Home" component={HomeTabs} />\n    </Stack.Navigator>\n  );\n}\n'})})]}),"\n",(0,a.jsx)(n.p,{children:"There are a couple of things to keep in mind when nesting navigators with the static API:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"With the dynamic API, the navigator component is a regular component and there's no restriction on how it's structured. As long as it has a navigator rendered somewhere in the tree, it will work for the nested navigation. With the static configuration, you must pass the object returned by another static navigator."}),"\n",(0,a.jsx)(n.li,{children:"You can use a component defined using the dynamic API as the value for a screen in the static API. However, automatic linking configuration and automatic TypeScript types won't work for the screen."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Mixing the static and dynamic APIs is possible, however, in those cases you'll lose the benefits of the static API. See ",(0,a.jsx)(n.a,{href:"/docs/7.x/static-combine-with-dynamic",children:"Combining static and dynamic APIs"})," for more details on some cases where you could mix the two APIs."]}),"\n",(0,a.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,a.jsx)(n.p,{children:"The static API is a convenience wrapper around the dynamic API, not a full-replacement. It's not suitable for all use cases. It's important to keep the limitations in mind when using the static API:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The navigation tree is static with the static API, i.e. the configuration can't be changed dynamically (e.g. updating list of screens or options based on external data)."}),"\n",(0,a.jsx)(n.li,{children:"The static configuration doesn't have access to context or props, so you can't use them in options, listeners etc. specified in the static configuration."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The dynamic API is still the primary API and isn't going away. So we recommend to avoid rewriting your app to use the static API if you have type-checking and deep linking setup already. Instead, consider using the static API in new projects where you know you won't need to change the configuration dynamically."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var a=t(67294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);