"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[49810],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),r=t(86010),o={tabItem:"tabItem_Ymn6"};function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},74866:function(e,n,t){t.d(n,{Z:function(){return w}});var a=t(83117),r=t(67294),o=t(86010),i=t(12466),l=t(16550),s=t(91980),c=t(67392),u=t(50012);function p(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function d(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:p(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,l.k6)(),i=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,s._X)(i),(0,r.useCallback)((function(e){if(i){var n=new URLSearchParams(o.location.search);n.set(i,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[i,o])]}function h(e){var n,t,a,o,i=e.defaultValue,l=e.queryString,s=void 0!==l&&l,c=e.groupId,p=d(e),h=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:p})})),v=h[0],g=h[1],k=f({queryString:s,groupId:c}),b=k[0],N=k[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),t=(0,u.Nk)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),y=w[0],S=w[1],I=function(){var e=null!=b?b:y;return m({value:e,tabValues:p})?e:null}();return(0,r.useLayoutEffect)((function(){I&&g(I)}),[I]),{selectedValue:v,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);g(e),N(e),S(e)}),[N,S,p]),tabValues:p}}var v=t(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){var n=e.className,t=e.block,l=e.selectedValue,s=e.selectValue,c=e.tabValues,u=[],p=(0,i.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=u.indexOf(n),a=c[t].value;a!==l&&(p(n),s(a))},m=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,r=u.indexOf(e.currentTarget)+1;t=null!=(a=u[r])?a:u[0];break;case"ArrowLeft":var o,i=u.indexOf(e.currentTarget)-1;t=null!=(o=u[i])?o:u[u.length-1]}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((function(e){var n=e.value,t=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:function(e){return u.push(e)},onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",g.tabItem,null==i?void 0:i.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function b(e){var n=e.lazy,t=e.children,a=e.selectedValue;if(t=Array.isArray(t)?t:[t],n){var o=t.find((function(e){return e.props.value===a}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function N(e){var n=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(k,(0,a.Z)({},e,n)),r.createElement(b,(0,a.Z)({},e,n)))}function w(e){var n=(0,v.Z)();return r.createElement(N,(0,a.Z)({key:String(n)},e))}},10919:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=t(83117),r=t(80102),o=(t(67294),t(3905)),i=(t(74866),t(85162),["components"]),l={id:"screen",title:"Screen",sidebar_label:"Screen"},s=void 0,c={unversionedId:"screen",id:"version-7.x/screen",title:"Screen",description:"Screen components are used to configure various aspects of screens inside a navigator.",source:"@site/versioned_docs/version-7.x/screen.md",sourceDirName:".",slug:"/screen",permalink:"/docs/7.x/screen",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/screen.md",tags:[],version:"7.x",frontMatter:{id:"screen",title:"Screen",sidebar_label:"Screen"},sidebar:"version-7.x/docs",previous:{title:"Group",permalink:"/docs/7.x/group"},next:{title:"Options for screens",permalink:"/docs/7.x/screen-options"}},u={},p=[{value:"Props",id:"props",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>options</code>",id:"options",level:3},{value:"<code>initialParams</code>",id:"initialparams",level:3},{value:"<code>getId</code>",id:"getid",level:3},{value:"<code>component</code>",id:"component",level:3},{value:"<code>getComponent</code>",id:"getcomponent",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>navigationKey</code>",id:"navigationkey",level:3},{value:"<code>listeners</code>",id:"listeners",level:3}],d={toc:p},m="wrapper";function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Screen")," components are used to configure various aspects of screens inside a navigator."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Screen")," is returned from a ",(0,o.kt)("inlineCode",{parentName:"p"},"createXNavigator")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const Stack = createNativeStackNavigator(); // Stack contains Screen & Navigator properties\n")),(0,o.kt)("p",null,"After creating the navigator, it can be used as children of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Navigator>\n  <Stack.Screen name="Home" component={HomeScreen} />\n  <Stack.Screen name="Profile" component={ProfileScreen} />\n</Stack.Navigator>\n')),(0,o.kt)("p",null,"You need to provide at least a name and a component to render for each screen."),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("h3",{id:"name"},(0,o.kt)("inlineCode",{parentName:"h3"},"name")),(0,o.kt)("p",null,"The name to use for the screen. It accepts a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen name="Profile" component={ProfileScreen} />\n')),(0,o.kt)("p",null,"This name is used to navigate to the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"navigation.navigate('Profile');\n")),(0,o.kt)("p",null,"It is also used for the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/7.x/route-prop"},(0,o.kt)("inlineCode",{parentName:"a"},"route")),"."),(0,o.kt)("p",null,"While it is supported, we recommend to avoid spaces or special characters in screen names and keep them simple."),(0,o.kt)("h3",{id:"options"},(0,o.kt)("inlineCode",{parentName:"h3"},"options")),(0,o.kt)("p",null,"Options to configure how the screen gets presented in the navigator. It accepts either an object or a function returning an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    title: 'Awesome app',\n  }}\n/>\n")),(0,o.kt)("p",null,"When you pass a function, it'll receive the ",(0,o.kt)("a",{parentName:"p",href:"/docs/7.x/route-prop"},(0,o.kt)("inlineCode",{parentName:"a"},"route"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/7.x/navigation-prop"},(0,o.kt)("inlineCode",{parentName:"a"},"navigation")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen\n  name="Profile"\n  component={ProfileScreen}\n  options={({ route, navigation }) => ({\n    title: route.params.userId,\n  })}\n/>\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/7.x/screen-options"},"Options for screens")," for more details and examples."),(0,o.kt)("h3",{id:"initialparams"},(0,o.kt)("inlineCode",{parentName:"h3"},"initialParams")),(0,o.kt)("p",null,"Initial params to use for the screen. If a screen is used as ",(0,o.kt)("inlineCode",{parentName:"p"},"initialRouteName"),", it'll contain the params from ",(0,o.kt)("inlineCode",{parentName:"p"},"initialParams"),". If you navigate to a new screen, the params passed are shallow merged with the initial params."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen\n  name="Details"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n')),(0,o.kt)("h3",{id:"getid"},(0,o.kt)("inlineCode",{parentName:"h3"},"getId")),(0,o.kt)("p",null,"Callback to return an unique ID to use for the screen. It receives an object with the route params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen\n  name="Profile"\n  component={ProfileScreen}\n  getId={({ params }) => params.userId}\n/>\n')),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"navigate('ScreenName', params)")," updates the current screen if the screen name matches, otherwise adds a new screen in a stack navigator. So if you're on ",(0,o.kt)("inlineCode",{parentName:"p"},"ScreenName")," and navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"ScreenName")," again, it won't add a new screen even if the params are different - it'll update the current screen with the new params instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Let's say you're on `Home` screen\n// Then you navigate to `Profile` screen with `userId: 1`\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n\n// Then you navigate to `Profile` screen again with `userId: 2`\nnavigation.navigate('Profile', { userId: 2 });\n\n// The stack will now have: `Home` -> `Profile` with `userId: 2`\n")),(0,o.kt)("p",null,"If you specify ",(0,o.kt)("inlineCode",{parentName:"p"},"getId")," and it doesn't return ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),", the screen is identified by both the screen name and the returned ID. Which means that if you're on ",(0,o.kt)("inlineCode",{parentName:"p"},"ScreenName")," and navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"ScreenName")," again with different params - and return a different ID from the ",(0,o.kt)("inlineCode",{parentName:"p"},"getId")," callback, it'll add a new screen to the stack:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Let's say you're on `Home` screen\n// Then you navigate to `Profile` screen with `userId: 1`\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n\n// Then you navigate to `Profile` screen again with `userId: 2`\nnavigation.navigate('Profile', { userId: 2 });\n\n// The stack will now have: `Home` -> `Profile` with `userId: 1` -> `Profile` with `userId: 2`\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"getId")," callback can also be used to ensure that the screen with the same ID doesn't appear multiple times in the stack:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Let's say you have a stack with the screens: `Home` -> `Profile` with `userId: 1` -> `Settings`\n// Then you navigate to `Profile` screen with `userId: 1` again\nnavigation.navigate('Profile', { userId: 1 });\n\n// Now the stack will have: `Home` -> `Profile` with `userId: 1`\n")),(0,o.kt)("p",null,"In the above examples, ",(0,o.kt)("inlineCode",{parentName:"p"},"params.userId")," is used as an ID, subsequent navigation to the screen with the same ",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," will navigate to the existing screen instead of adding a new one to the stack. If the navigation was with a different ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),", then it'll add a new screen."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"getId")," is specified in a tab or drawer navigator, the screen will remount if the ID changes."),(0,o.kt)("h3",{id:"component"},(0,o.kt)("inlineCode",{parentName:"h3"},"component")),(0,o.kt)("p",null,"The React Component to render for the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen name="Profile" component={ProfileScreen} />\n')),(0,o.kt)("h3",{id:"getcomponent"},(0,o.kt)("inlineCode",{parentName:"h3"},"getComponent")),(0,o.kt)("p",null,"Callback to return the React Component to render for the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<Stack.Screen\n  name=\"Profile\"\n  getComponent={() => require('./ProfileScreen').default}\n/>\n")),(0,o.kt)("p",null,"You can use this approach instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"component")," prop if you want the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProfileScreen")," module to be lazily evaluated when needed. This is especially useful when using ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/ram-bundles-inline-requires"},"ram bundles")," to improve initial load."),(0,o.kt)("h3",{id:"children"},(0,o.kt)("inlineCode",{parentName:"h3"},"children")),(0,o.kt)("p",null,"Render callback to return React Element to use for the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Stack.Screen name="Profile">\n  {(props) => <ProfileScreen {...props} />}\n</Stack.Screen>\n')),(0,o.kt)("p",null,"You can use this approach instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"component")," prop if you need to pass additional props. Though we recommend using ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React context")," for passing data instead."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"By default, React Navigation applies optimizations to screen components to prevent unnecessary renders. Using a render callback removes those optimizations. So if you use a render callback, you'll need to ensure that you use ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-api.html#reactmemo"},(0,o.kt)("inlineCode",{parentName:"a"},"React.memo"))," or ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-api.html#reactpurecomponent"},(0,o.kt)("inlineCode",{parentName:"a"},"React.PureComponent"))," for your screen components to avoid performance issues.")),(0,o.kt)("h3",{id:"navigationkey"},(0,o.kt)("inlineCode",{parentName:"h3"},"navigationKey")),(0,o.kt)("p",null,"Optional key for this screen. This doesn't need to be unique. If the key changes, existing screens with this name will be removed (if used in a stack navigator) or reset (if used in a tab or drawer navigator)."),(0,o.kt)("p",null,"This can be useful when we have some screens which we want to be removed or reset when the condition changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<Stack.Screen\n  navigationKey={isSignedIn ? 'user' : 'guest'}\n  name=\"Profile\"\n  component={ProfileScreen}\n/>\n")),(0,o.kt)("h3",{id:"listeners"},(0,o.kt)("inlineCode",{parentName:"h3"},"listeners")),(0,o.kt)("p",null,"Event listeners to subscribe to. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/7.x/navigation-events#listeners-prop-on-screen"},(0,o.kt)("inlineCode",{parentName:"a"},"listeners")," prop on ",(0,o.kt)("inlineCode",{parentName:"a"},"Screen"))," for more details."))}f.isMDXComponent=!0}}]);