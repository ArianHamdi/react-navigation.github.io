"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[88095],{49685:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=r(85893),a=r(11151);const i={id:"multiple-drawers",title:"Multiple drawers",sidebar_label:"Multiple drawers"},o=void 0,s={id:"multiple-drawers",title:"Multiple drawers",description:"Sometimes we want to have multiple drawers on the same screen: one on the left and one on the right. This can be achieved by nesting 2 drawer navigators.",source:"@site/versioned_docs/version-6.x/multiple-drawers.md",sourceDirName:".",slug:"/multiple-drawers",permalink:"/docs/multiple-drawers",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/multiple-drawers.md",tags:[],version:"6.x",frontMatter:{id:"multiple-drawers",title:"Multiple drawers",sidebar_label:"Multiple drawers"},sidebar:"docs",previous:{title:"Opening a modal",permalink:"/docs/modal"},next:{title:"Screen options with nested navigators",permalink:"/docs/screen-options-resolution"}},c={},d=[{value:"Nesting 2 drawer navigators",id:"nesting-2-drawer-navigators",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Sometimes we want to have multiple drawers on the same screen: one on the left and one on the right. This can be achieved by ",(0,t.jsx)(n.a,{href:"/docs/nesting-navigators",children:"nesting"})," 2 ",(0,t.jsx)(n.a,{href:"/docs/drawer-navigator",children:"drawer navigators"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"nesting-2-drawer-navigators",children:"Nesting 2 drawer navigators"}),"\n",(0,t.jsx)(n.p,{children:"Here we have 2 drawers nested inside each other, one is positioned on left and the other on the right:"}),"\n",(0,t.jsx)("samp",{id:"multiple-drawers-issue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { Button, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()} title=\"Open drawer\" />\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nconst RightDrawer = createDrawerNavigator();\n\nconst RightDrawerScreen = () => {\n  return (\n    <RightDrawer.Navigator\n      screenOptions={{ drawerPosition: 'right', headerShown: false }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["But there is one problem. When we call ",(0,t.jsx)(n.code,{children:"navigation.openDrawer()"})," in our ",(0,t.jsx)(n.code,{children:"HomeScreen"}),", it always opens the left drawer since it's the immediate parent of the screen."]}),"\n",(0,t.jsxs)(n.p,{children:["To solve this, we need to use ",(0,t.jsx)(n.a,{href:"/docs/navigation-prop#getparent",children:(0,t.jsx)(n.code,{children:"navigation.getParent"})})," to refer to the right drawer which is the parent of the left drawer. So our code would look like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'<Button onPress={() => navigation.openDrawer()} title="Open left drawer" />\n<Button onPress={() => navigation.getParent().openDrawer()} title="Open right drawer" />\n'})}),"\n",(0,t.jsxs)(n.p,{children:["However, this means that our button needs to know about the parent navigators, which isn't ideal. If our button is further nested inside other navigators, it'd need multiple ",(0,t.jsx)(n.code,{children:"getParent()"})," calls. To address this, we can use the ",(0,t.jsxs)(n.a,{href:"/docs/drawer-navigator#id",children:[(0,t.jsx)(n.code,{children:"id"})," prop"]})," to identify the parent navigator."]}),"\n",(0,t.jsxs)(n.p,{children:["To customize the contents of the drawer, we can use the ",(0,t.jsxs)(n.a,{href:"/docs/drawer-navigator#drawercontent",children:[(0,t.jsx)(n.code,{children:"drawerContent"})," prop"]})," to pass in a function that renders a custom component."]}),"\n",(0,t.jsx)(n.p,{children:"The final code would look like this:"}),"\n",(0,t.jsx)("samp",{id:"multiple-drawers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.getParent('LeftDrawer').openDrawer()}\n        title=\"Open left drawer\"\n      />\n      <Button\n        onPress={() => navigation.getParent('RightDrawer').openDrawer()}\n        title=\"Open right drawer\"\n      />\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nfunction LeftDrawerScreen() {\n  return (\n    <LeftDrawer.Navigator\n      id=\"LeftDrawer\"\n      screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n}\n\nconst RightDrawer = createDrawerNavigator();\n\nfunction RightDrawerScreen() {\n  return (\n    <RightDrawer.Navigator\n      id=\"RightDrawer\"\n      drawerContent={(props) => <RightDrawerContent {...props} />}\n      screenOptions={{\n        drawerPosition: 'right',\n        headerShown: false,\n      }}>\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, we are passing ",(0,t.jsx)(n.code,{children:'"LeftDrawer"'})," and ",(0,t.jsx)(n.code,{children:'"RightDrawer"'})," strings (you can use any string here) in the ",(0,t.jsx)(n.code,{children:"id"})," prop of the drawer navigators. Then we use ",(0,t.jsx)(n.code,{children:"navigation.getParent('LeftDrawer').openDrawer()"})," to open the left drawer and ",(0,t.jsx)(n.code,{children:"navigation.getParent('RightDrawer').openDrawer()"})," to open the right drawer."]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["To have 2 drawers on the screen, you can use the ",(0,t.jsx)(n.a,{href:"/docs/drawer-navigator#drawerposition",children:(0,t.jsx)(n.code,{children:"drawerPosition"})})," option to position them on ",(0,t.jsx)(n.code,{children:'"left"'})," and ",(0,t.jsx)(n.code,{children:'"right"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["To open the desired drawer, you can use ",(0,t.jsx)(n.a,{href:"/docs/navigation-prop#getparent",children:(0,t.jsx)(n.code,{children:"navigation.getParent"})})," in combination with the ",(0,t.jsxs)(n.a,{href:"/docs/drawer-navigator#id",children:[(0,t.jsx)(n.code,{children:"id"})," prop"]}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>o});var t=r(67294);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);