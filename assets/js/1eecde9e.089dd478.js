"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[64222],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,h=m["".concat(l,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(86010),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:function(e,t,n){n.d(t,{Z:function(){return w}});var a=n(83117),r=n(67294),i=n(86010),o=n(12466),s=n(16550),l=n(91980),u=n(67392),c=n(50012);function m(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:m(n);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function p(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function h(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,s.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,l._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function v(e){var t,n,a,i,o=e.defaultValue,s=e.queryString,l=void 0!==s&&s,u=e.groupId,m=d(e),v=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:m})})),f=v[0],g=v[1],k=h({queryString:l,groupId:u}),b=k[0],y=k[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),n=(0,c.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),N=w[0],T=w[1],S=function(){var e=null!=b?b:N;return p({value:e,tabValues:m})?e:null}();return(0,r.useLayoutEffect)((function(){S&&g(S)}),[S]),{selectedValue:f,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);g(e),y(e),T(e)}),[y,T,m]),tabValues:m}}var f=n(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){var t=e.className,n=e.block,s=e.selectedValue,l=e.selectValue,u=e.tabValues,c=[],m=(0,o.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==s&&(m(t),l(a))},p=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,r=c.indexOf(e.currentTarget)+1;n=null!=(a=c[r])?a:c[0];break;case"ArrowLeft":var i,o=c.indexOf(e.currentTarget)-1;n=null!=(i=c[o])?i:c[c.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:function(e){return c.push(e)},onKeyDown:p,onClick:d},o,{className:(0,i.Z)("tabs__item",g.tabItem,null==o?void 0:o.className,{"tabs__item--active":s===t})}),null!=n?n:t)})))}function b(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var i=n.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function y(e){var t=v(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function w(e){var t=(0,f.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},12683:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=(n(74866),n(85162),["components"]),s={},l="Animating elements between screens",u={unversionedId:"shared-element-transitions",id:"version-6.x/shared-element-transitions",title:"Animating elements between screens",description:"This guide covers how to animate elements between screens. This feature is known as a Shared Element Transition and it's implemented in the @react-navigation/native-stack with React Native Reanimated.",source:"@site/versioned_docs/version-6.x/shared-element-transitions.md",sourceDirName:".",slug:"/shared-element-transitions",permalink:"/docs/shared-element-transitions",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/shared-element-transitions.md",tags:[],version:"6.x",frontMatter:{},sidebar:"version-6.x/docs",previous:{title:"Custom Android back button behavior",permalink:"/docs/custom-android-back-button-handling"},next:{title:"Preventing going back",permalink:"/docs/preventing-going-back"}},c={},m=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Minimal example",id:"minimal-example",level:2},{value:"Customizing the transition",id:"customizing-the-transition",level:2},{value:"Reference",id:"reference",level:2},{value:"Alternatives",id:"alternatives",level:2}],d={toc:m},p="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"animating-elements-between-screens"},"Animating elements between screens"),(0,i.kt)("p",null,"This guide covers how to animate elements between screens. This feature is known as a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/api/sharedElementTransitions"},"Shared Element Transition")," and it's implemented in the ",(0,i.kt)("a",{parentName:"p",href:"(/docs/native-stack-navigator)"},(0,i.kt)("inlineCode",{parentName:"a"},"@react-navigation/native-stack"))," with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/"},"React Native Reanimated"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: As of writing this guide, Shared Element Transitions are considered an experimental feature not recommended for production use.")),(0,i.kt)("div",{style:{display:"flex",margin:"16px 0"}},(0,i.kt)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0},(0,i.kt)("source",{src:"/assets/shared-element-transitions/shared-element-transitions.mp4"}))),(0,i.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,i.kt)("p",null,"Before continuing this guide make sure your app meets these criteria:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You are using ",(0,i.kt)("a",{parentName:"li",href:"/docs/native-stack-navigator"},(0,i.kt)("inlineCode",{parentName:"a"},"@react-navigation/native-stack")),". The Shared Element Transitions feature isn't supported in JS-based ",(0,i.kt)("a",{parentName:"li",href:"/docs/stack-navigator"},(0,i.kt)("inlineCode",{parentName:"a"},"@react-navigation/stack")),"."),(0,i.kt)("li",{parentName:"ul"},"You have ",(0,i.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started"},(0,i.kt)("inlineCode",{parentName:"a"},"react-native-reanimated"))," ",(0,i.kt)("strong",{parentName:"li"},"v3.0.0 or higher")," installed and configured.")),(0,i.kt)("h2",{id:"minimal-example"},"Minimal example"),(0,i.kt)("p",null,"To create a shared transition:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Animated")," components imported from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-native-reanimated"),"."),(0,i.kt)("li",{parentName:"ol"},"Assign the same ",(0,i.kt)("inlineCode",{parentName:"li"},"sharedTransitionTag")," to elements on different screens."),(0,i.kt)("li",{parentName:"ol"},"Navigate between screens. The transition will start automatically.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { View, Button, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport Animated from 'react-native-reanimated';\n\n// highlight-next-line\nconst Stack = createNativeStackNavigator();\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Go to Details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 300, height: 300 }}\n        // highlight-next-line\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <Button title=\"Go back\" onPress={() => navigation.goBack()} />\n      <Animated.Image\n        source={{ uri: 'https://picsum.photos/id/39/200' }}\n        style={{ width: 100, height: 100 }}\n        // highlight-next-line\n        sharedTransitionTag=\"tag\"\n      />\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sharedTransitionTag")," is a string that has to be unique in the context of a single screen, but has to match elements between screens. This prop allows Reanimated to identify and animate the elements, similarly to the ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key"},(0,i.kt)("inlineCode",{parentName:"a"},"key"))," property, which tells React which element in the list is which."),(0,i.kt)("h2",{id:"customizing-the-transition"},"Customizing the transition"),(0,i.kt)("p",null,"By default, the transition animates the ",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"height"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"originX"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"originY")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," properties using ",(0,i.kt)("inlineCode",{parentName:"p"},"withTiming")," with a 500 ms duration. You can easily customize ",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"height"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"originX"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"originY")," props. Customizing ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," is also possible but it's far beyond the scope of this guide."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: Custom SharedTransition API is not finalized and might change in a future release.")),(0,i.kt)("p",null,"To customize the transition you need to pass all the properties besides ",(0,i.kt)("inlineCode",{parentName:"p"},"transform"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SharedTransition } from 'react-native-reanimated';\n\nconst customTransition = SharedTransition.custom((values) => {\n  'worklet';\n  return {\n    height: withSpring(values.targetHeight),\n    width: withSpring(values.targetWidth),\n    originX: withSpring(values.targetOriginX),\n    originY: withSpring(values.targetOriginY),\n  };\n});\n\nfunction HomeScreen() {\n  return (\n    <Animated.Image\n      style={{ width: 300, height: 300 }}\n      sharedTransitionTag=\"tag\"\n      // highlight-next-line\n      sharedTransitionStyle={customTransition} // add this to both elements on both screens\n    />\n  );\n}\n")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("p",null,"You can find a full Shared Element Transitions reference in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview/"},"React Native Reanimated documentation"),"."),(0,i.kt)("h2",{id:"alternatives"},"Alternatives"),(0,i.kt)("p",null,"Alternatively, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/IjzerenHein/react-native-shared-element"},(0,i.kt)("inlineCode",{parentName:"a"},"react-native-shared-element"))," library with a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/IjzerenHein/react-navigation-shared-element"},"React Navigation binding")," which implements Shared Element Transitions in a JS-based ",(0,i.kt)("inlineCode",{parentName:"p"},"@react-navigation/stack")," navigator. This solution, however, isn't actively maintained."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"react-native-navigation"))," also comes with support for Shared Element Transitions. You can read more about it ",(0,i.kt)("a",{parentName:"p",href:"https://wix.github.io/react-native-navigation/docs/style-animations#shared-element-transitions"},"here"),"."))}h.isMDXComponent=!0}}]);