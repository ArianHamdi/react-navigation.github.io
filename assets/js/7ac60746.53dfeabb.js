"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[60691],{8206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(85893),r=t(11151);const o={id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"},i=void 0,s={id:"drawer-based-navigation",title:"Drawer navigation",description:"The drawer navigator allows you to present a navigation menu to your users. It can be customized out of the box, or you can completely control with a custom component.",source:"@site/versioned_docs/version-3.x/drawer-based-navigation.md",sourceDirName:".",slug:"/drawer-based-navigation",permalink:"/docs/3.x/drawer-based-navigation",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/drawer-based-navigation.md",tags:[],version:"3.x",frontMatter:{id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"},sidebar:"version-3.x-docs",previous:{title:"Tab navigation",permalink:"/docs/3.x/tab-based-navigation"},next:{title:"Authentication flows",permalink:"/docs/3.x/auth-flow"}},c={},l=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The drawer navigator allows you to present a navigation menu to your users. It can be customized out of the box, or you can completely control with a custom component."}),"\n",(0,a.jsxs)(n.p,{children:["This guide covers ",(0,a.jsx)(n.a,{href:"/docs/3.x/drawer-navigator",children:"createDrawerNavigator"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"class HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>\n      </View>\n    );\n  }\n}\n\nconst DrawerNavigator = createDrawerNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    hideStatusBar: true,\n    drawerBackgroundColor: 'rgba(255,255,255,.9)',\n    overlayColor: '#6b52ae',\n    contentOptions: {\n      activeTintColor: '#fff',\n      activeBackgroundColor: '#6b52ae',\n    },\n  }\n);\n\nexport default createAppContainer(DrawerNavigator);\n"})}),"\n",(0,a.jsx)("a",{href:"https://snack.expo.io/@react-navigation/basic-drawer-v3",target:"blank",class:"run-code-button",children:"\u2192 Run this code"}),"\n",(0,a.jsx)(n.p,{children:"To open and close drawer, use the following helpers to open and close the drawer:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"this.props.navigation.openDrawer();\nthis.props.navigation.closeDrawer();\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you would like to toggle the drawer you call the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"this.props.navigation.toggleDrawer();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Each of these functions, behind the scenes, are simply dispatching actions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"this.props.navigation.dispatch(DrawerActions.openDrawer());\nthis.props.navigation.dispatch(DrawerActions.closeDrawer());\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you would like to determine if drawer is open or closed, you can do the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const parent = this.props.navigation.dangerouslyGetParent();\nconst isDrawerOpen = parent && parent.state && parent.state.isDrawerOpen;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Additionally, you can automatically hide the status bar by passing the DrawerLayout prop of ",(0,a.jsx)(n.code,{children:"hideStatusBar: true"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(67294);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);